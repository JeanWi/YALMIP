# This is a basic workflow to help you get started with MATLAB Actions

name: MATLAB

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ Githubactionstest ]
  pull_request:
    branches: [ Githubactionstest ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      # Sets up MATLAB on the GitHub Actions runner
      - name: Setup MATLAB
        uses: matlab-actions/setup-matlab@v0

      # As an alternative to run-tests, you can use run-command to execute a MATLAB script, function, or statement.
      - name: Run operator tests
        uses: matlab-actions/run-command@v0
        with:
          command: addpath(genpath(pwd)); results = runxunittests('dev/tests/core'); assertSuccess(results);
          
      - name: Run core tests
        uses: matlab-actions/run-command@v0
        if: success() || failure()
        with:
          command: addpath(genpath(pwd)); results = runxunittests('dev/tests/operators'); assertSuccess(results);

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        if: success() || failure()
        with:
          name: junit
          path: core.xml

      - name: Test Report
        uses: dorny/test-reporter@v1.4.3
        if: success() || failure()    # run this step even if previous step failed
        with:
          name: Junit                 # Name of the check run which will be created
          path: '*.xml'               # Path to test results
          reporter: java-junit        # Format of test results                   