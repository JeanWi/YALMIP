# This is a basic workflow to help you get started with MATLAB Actions

name: MATLAB Testing

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # This workflow contains a single job called "build"
  build:
    name: Complete integration test
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Checkout tools repo
        uses: actions/checkout@v2
        with:
          repository: sqlp/sedumi
          path: sedumi
          
      - name: Confirm
        run: ls -l
      
      # Sets up MATLAB on the GitHub Actions runner
      - name: Setup MATLAB
        uses: matlab-actions/setup-matlab@v0
       
      - name: Test core
        uses: matlab-actions/run-command@v0
        with:
          command: addpath(genpath(pwd)); results = runxunittests('dev/tests/core'); assertSuccess(results);

      - name: Test operators
        uses: matlab-actions/run-command@v0
        with:
          command: addpath(genpath(pwd)); results = runxunittests('dev/tests/operators'); assertSuccess(results);

      - name: Test optimizer module
        uses: matlab-actions/run-command@v0
        with:
          command: addpath(genpath(pwd)); results = runxunittests('dev/tests/optimizer'); assertSuccess(results);   

      - name: Test robust optimization module
        uses: matlab-actions/run-command@v0
        with:
          command: addpath(genpath(pwd)); results = runxunittests('dev/tests/robust'); assertSuccess(results);                 
       
      - name: Test BNB solver
        uses: matlab-actions/run-command@v0
        with:
          command: addpath(genpath(pwd)); results = runxunittests('dev/tests/bnb'); assertSuccess(results);

     - name: Test BMIBNB solver
        uses: matlab-actions/run-command@v0
        with:
          command: addpath(genpath(pwd)); results = runxunittests('dev/tests/bmibnb'); assertSuccess(results);

      - name: Test bilevel solver
        uses: matlab-actions/run-command@v0
        with:
          command: addpath(genpath(pwd)); results = runxunittests('dev/tests/bilevel'); assertSuccess(results);
                  
      - name: Test dualize
        uses: matlab-actions/run-command@v0
        with:
          command: addpath(genpath(pwd)); results = runxunittests('dev/tests/dualize'); assertSuccess(results);

      - name: Test geometric programming layer
        uses: matlab-actions/run-command@v0
        with:
          command: addpath(genpath(pwd)); results = runxunittests('dev/tests/geometric'); assertSuccess(results);

      - name: Test sum-of-squares module
        uses: matlab-actions/run-command@v0
        with:
          command: addpath(genpath(pwd)); results = runxunittests('dev/tests/sos'); assertSuccess(results);

      - name: Test moment relaxations module
        uses: matlab-actions/run-command@v0
        with:
          command: addpath(genpath(pwd)); results = runxunittests('dev/tests/moment'); assertSuccess(results);

      - name: Test misc
        uses: matlab-actions/run-command@v0
        with:
          command: addpath(genpath(pwd)); results = runxunittests('dev/tests/misc'); assertSuccess(results);

      - name: Test Report
        uses: dorny/test-reporter@v1.4.3
        if: success() || failure()    # run this step even if previous step failed
        with:
          name: Report                 # Name of the check run which will be created
          path: '*.xml'               # Path to test results
          reporter: java-junit        # Format of test results                   
